JNI（Java Native Interface）
Java调用C/C++，C/C++调用Java的一套API

1.编写native方法
2.javah命令，生成.h头文件
3.复制.h头文件到CPP工程中
4.复制jni.h和jni_md.h文件到CPP工程中
5.实现.h头文件中声明的函数
6.生成dll文件
7.配置dll文件所在目录到环境变量
8.重启Eclipse

C的函数名称：Java_完整类名_函数名

.a
.dll 共享代码

JNIEnv

在C中：
JNIEnv 结构体指针别名
env二级指针

在C++中：
JNIEnv 是一个结构体的别名
env 一级指针

1.为什么需要传入JNIEnv，函数执行过程中需要JNIEnv
2.C++为什么没有传入？this
3.C++只是对C的那一套进行的封装，给一个变量赋值为指针，这个变量是二级指针

//-----------------------------------------------------------------------------------------------------------------------------------


每个native函数，都至少有两个参数（JNIEnv*,jclass或者jobject)
//1）当native方法为静态方法时：
	jclass 代表native方法所属类的class对象(JniTest.class)
//2）当native方法为非静态方法时：
	jobject 代表native方法所属的对象

基本数据 ;
//1) Java基本数据类型与JNI数据类型的映射关系
	Java类型->JNI类型->C类型
/*
boolean jboolean
byte jbyte;
char jchar;
short jshort;
int jint;
long jlong;
float jfloat;
double jdouble;
void void
*/
//2)引用类型(对象)
/*
//String jstring
	object jobject
//数组,基本数据类型的数组
	byte[] jByteArray
//对象数组
	object[](String[]) jobjectArray
*/

//-----------------------------------------------------------------------------------------------------------------------------------

Eclipse NDK开发流程
1.编写Java层Native方法
2.javah命令生成头文件
3.创建jni目录
4.添加本地支持add native support
5.实现头文件中定义的函数
6.编译生成.so动态库
7.加载动态库

常用命令行命令：
// 获取c/c++语言的 .h 文件
javah ：cd 项目工程的src目录下（例如：E:\CodeProject\java\JniDemo\JniTest\src） --》javah 完整类名（例如：com.jcy.jni.JniTest）
// 获取成员或者方法的 ID
javap ：cd 项目工程的bin目录下 (例如：E:\CodeProject\java\JniDemo\JniTest\bin)  --》javap -s -p 完整类名（例如：com.jcy.jni.JniTest）