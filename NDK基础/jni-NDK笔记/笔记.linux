清空命令行：reset

文件操作：
显示列表
ls -l
ls -la 所有
ls -l ja* 通配符查找

创建文件
touch today.c

复制文件
cp src.txt dest.txt
cp -i src.txt dest.txt 询问
cp src.txt . 复制到当前目录
cp -R 目录 dest 复制整个目录到指定路径
cp c_?1 ../  通配符复制到上级目录

删除文件
rm file

删除目录
rm -rf 目录

查看文件类型：
file 文件

查看文件内容：
cat file
cat -n file 显示行号

查看文件最后10行
tail -n 10 file
查看文件最开始的10行
head -n 10 file

创建用户
useradd -m jack 创建用户的同时，创建了home目录
userdel -r jack 删除用户

创建组
groupadd androidgroup
分配用户到组
usermod -G androidgroup jack

文件权限
r读 w写 x执行
drwxr-xr-x
d rwx r-x r-x
d目录
1.文件所属用户具备的权限（root对该文件具备读写执行权限）
2.文件所属用户的所属组具备的权限（读、执行）
3.系统的其他用户具备的权限（读、执行）

rwx必须是固定顺序

权限		二进制		八进制
---			000			0
--x			001			1
-w-			010			2
-wx			011			3
r--			100			4
r-x			101			5
rw-			110			6
rwx			111			7

修改文件权限
chmod 644 file
给用户加上执行权限
chmod u+x file

改变创建目录的默认权限
umask 026

777-026

改变文件的所属
chown user.group file
chown user file
chown .group file

vim命令：
  ● 模式切换
插入模式
1）i 进入插入模式，光标前
2）a 进入插入模式，光标后
3）I 行首
4）A 行末

命令模式：ESC
末行模式：shift + ;
1）w 存盘
2）wq 存盘退出
3）q! 不存盘退出

删除行：dd
翻页：ctrl + f（上一页） ctrl + b（下一页）
复制行：yy
粘贴：p
撤销上一步的操作：u
恢复上一步被撤销的操作：Ctrl+r

  ● 文本搜索
？pattern Enter
n 朝同一方向搜索
N 朝相反方向搜索

--------------------------shell脚本---------------------------------
输出
echo

// shell脚本格式
-------------------start---------------------
#!/bin/bash
NDK=10
text="i love shell"
#命令的执行结果的输出作为变量的值
text1=`date`
text2=$(who)

echo $NDK
echo $text
echo "$text very much"
echo "\$NDK"
echo $text1
echo $text2
-------------------end-----------------------

命令执行退出(结束后)的状态：echo $?
0 成功
127 没有找到命令
1 未知错误
126 命令不可执行

// shell 中的if语句
------------------start-----------------------
只有if命令的退出状态码为0，才会执行then部分
if 命令
then
   命令
fi

test数值比较
-gt 大于
-eq 等于
-le 小于
-ne 不等于

number=20
# [] 中空格不可少加
if [ $number -gt 10 ]
then
	echo "$number 大于 10"
else
	echo "$number 小于 10"
fi

test字符串比较
str1 == str2
str1 != str2
str1 < str2
-n str1 长度是否非0
-z str1 长度是否为0
------------------end-------------------------

文件比较
-d 检查是否存在，并且是一个目录
-e 检查file是否存在
-f 检查是否存在，并且是一个文件
-r 检查是否存在，并且可读
-w、-x
file1 -nt file2 file1比file2新
file1 -ot file2 file1比file2旧

// shell 中 case命令（类似于switch语句）
------------------start-----------------------
case 变量 in // 变量是否在下面pattern中
pattern1) 命令;;
pattern2) 命令;;
*) 默认命令;; // 都不在，则可以走默认语句
esac
// eg.1
#!/bin/bash
testuser=jcy
case $testuser in
jcy)
	echo "hi,$testuser";;
jcyun)
	echo "hello, ricky";;
*)
	echo "defaults";;
esac
------------------end-------------------------

// shell 中 for命令（for循环）
------------------start-----------------------
for var in list
do
	命令
done
// eg.1
#!/bin/bash
for item in Mother Father Firend
do
    echo "Hi, $item"
done
// eg.2
list="Mother\'s Father Brother" // 不需分隔符
list2="windows--linux--macos" // 需要分割符
#IFS字段分隔符
IFS=$--
for item in $list2
do
	echo $item
done
------------------end-------------------------

// shell 中 while命令
------------------start-----------------------
while test command
do
	命令
done
// eg.1
#!/bin/bash
a=10
while [ $a -gt 0 ]
do
	echo "num:$a"
	#赋值不用使用$符号
	a=$[ $a - 1 ]
	if [ $a -eq 5 ]
	then
		echo "break"
		break
	fi
done
------------------end-------------------------

// shell 命令中 参数传递
------------------start-----------------------
// eg.1
    执行 ==》./01.sh 1 2
    01.sh文件中：
        $#  --》代表参数个数
        $0  --》代表 01.sh路径
        $1  --》代表 1
        $2  --》代表 2
        $@  --》代表所有参数，可遍历
// eg.2
#使用$@遍历所有参数
#getopt
echo "遍历"
for param in "$@"
do
	echo "param:$param"
done

------------------end-------------------------

// shell 输入输出重定向: >、>>、 1>、 2>、 1>>、 2>>、 <
唯一的区别就是>是重定向到一个文件，>>是追加内容到文件。两个命令都是如果文件不存在则创建文件
./14.sh 1> test7 将标准输出重定向到test7文件，不再输出到屏幕上
// eg.1
#!/bin/bash
##标准输入输出
#0 STDIN
#1 STDOUT 标准输出
#2 STDERR 标准错误
#永久重定向
exec 1>test7
exec 2>test8
#自定义输出
exec 7>test9
echo "cc zz" >&7
echo "cc yy"
ls -a ./ff // 查看ff文件的情况，若当前目录下无此文件，则会报错，错误信息会输入进 test8

// shell 函数
// eg.1
    #!/bin/bash
    #函数的传参，返回值
    function myfun
    {
    	echo $[ $1 + $2 ]
    }
    value=$(myfun 10 90)
    echo "value:$value"
// eg.2
17.sh->
    #!/bin/bash
    #函数库
    function add()
    {
    	echo $[ $1 + $2 ]
    }
main.sh->
    #!/bin/bash
    #引入./17.sh
    #source ./17.sh
    #. 是 source快捷别名
    . ./17.sh
    function myfun()
    {
    	echo $value
    }
    value=20
    myfun
    echo "add value:$(add 10 30)"

编译ffmpeg
编写shell脚本之前，要执行./configure --disable-yasm，主要目录进行一系列的准备工作，比如说检查gcc的版本，会生成config.mak等文件

shell脚本编写：
    // .configure --help ==> 可以查看configure文件需要传递的参数说明列表

   1 #!/bin/bash
   2
   3 export ANDROID_NDK_HOME=/usr/ndk/android-ndk-r10e
   4 export PLATFORM_VERSION=android-9
   5
   6 function build_ffmpeg
   7 {
   8     echo "start build ffmpeg $ARCH"
   9     ./configure --target-os=linux \（后面不能有空格，换行也不能有，换行可以有tab键）
  10         --prefix=$PREFIX \
  11         --arch=$ARCH \
  12         --enable-shared \（生成动态库）
  13         --disable-static \（不生成静态库）
  14         --disable-yasm \（disable：不需要生成）
  15         --disable-ffmpeg \
  16         --disable-ffplay \
  17         --disable-ffprobe \
  18         --disable-ffserver \
  19         --disable-doc \
  20         --enable-cross-compile \
  21         --cross-prefix=$CROSS_COMPILE \（交叉编译）
  22         --sysroot=$PLATFORM（编辑平台系统）
  23         --extra-cflags="-fpic"
  24         make clean
  25         make
  26         make install
  27
  28         echo "build finished $ARCH"
  29 }
  30
  31 exec 1>jcy_build.txt
  32 exec 2>jcy_build_error.txt
  33 ARCH=arm
  34 CPU=arm
  35 PREFIX=$(pwd)/android/$CPU
  36 TOOLCHAIN=$ANDROID_NDK_HOME/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64
  37 CROSS_COMPILE=$TOOLCHAIN/bin/arm-linux-androideabi-
  38 PLATFORM=$ANDROID_NDK_HOME/platforms/$PLATFORM_VERSION/arch-$ARCH
  39 build_ffmpeg













